{
  "Comment": "Tabulate Step Functions",
  "StartAt": "Map",
  "States": {
    "Map": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Choice",
        "States": {
          "Choice": {
            "Type": "Choice",
            "Choices": [
              {
                "Or": [
                  {
                    "Variable": "$.file_name",
                    "StringMatches": "*/*.png"
                  },
                  {
                    "Variable": "$.file_name",
                    "StringMatches": "*/*.jpg"
                  },
                  {
                    "Variable": "$.file_name",
                    "StringMatches": "*/*.jpeg"
                  }
                ],
                "Next": "Extract-text-from-img"
              },
              {
                "Or": [
                  {
                    "Variable": "$.file_name",
                    "StringMatches": "*/*.pdf"
                  },
                  {
                    "Variable": "$.file_name",
                    "StringMatches": "*/*.doc"
                  },
                  {
                    "Variable": "$.file_name",
                    "StringMatches": "*/*.docx"
                  }
                ],
                "Next": "Extract-text"
              },
              {
                "Or": [
                  {
                    "Variable": "$.file_name",
                    "StringMatches": "*/*.wav"
                  },
                  {
                    "Variable": "$.file_name",
                    "StringMatches": "*/*.mp3"
                  }
                ],
                "Next": "Extract-audio"
              }
            ],
            "Default": "Extract-text"
          },
          "Extract-text-from-img": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload": {
                "body.$": "$"
              },
              "FunctionName": "${LAMBDA_EXTRACT_ATTRIBUTES_LLM_IMG}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "ResultSelector": {
              "merged.$": "States.JsonMerge($$.Execution.Input, States.StringToJson($.Payload.body), false)"
            },
            "OutputPath": "$.merged",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "Comment": "Catch Lambda failed execution",
                "ResultPath": "$.error",
                "Next": "Pass"
              }
            ],
            "End": true
          },
          "Extract-text": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload": {
                "body.$": "$"
              },
              "FunctionName": "${LAMBDA_RUN_TEXTRACT}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "Catch": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "Comment": "Catch Lambda failed execution",
                "ResultPath": "$.error",
                "Next": "Pass"
              }
            ],
            "End": true,
            "ResultSelector": {
              "merged.$": "States.JsonMerge($$.Execution.Input, States.StringToJson($.Payload.body), false)"
            },
            "OutputPath": "$.merged"
          },
          "Extract-audio": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload": {
                "body.$": "$"
              },
              "FunctionName": "${LAMBDA_RUN_TRANSCRIBE}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              },
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "BackoffRate": 2,
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "JitterStrategy": "FULL"
              }
            ],
            "ResultSelector": {
              "llm_answer.$": "States.StringToJson($.Payload.body)"
            },
            "Catch": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "Comment": "Catch Lambda failed execution",
                "ResultPath": "$.error",
                "Next": "Pass"
              }
            ],
            "End": true
          },
          "Pass": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "file_name.$": "$.file_name",
              "error.$": "$.error"
            }
          }
        }
      },
      "Next": "Extract-entities",
      "ItemsPath": "$.documents",
      "ItemSelector": {
        "file_name.$": "$$.Map.Item.Value",
        "attributes.$": "$.attributes",
        "model_params.$": "$.model_params",
        "parsing_mode.$": "$.parsing_mode"
      },
      "MaxConcurrency": 10
    },
    "Extract-entities": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "body.$": "$"
        },
        "FunctionName": "${LAMBDA_EXTRACT_ATTRIBUTES}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        },
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultSelector": {
        "llm_answer.$": "States.StringToJson($.Payload.body)"
      },
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "Comment": "Catch Lambda failed execution",
          "ResultPath": "$.error",
          "Next": "FailState"
        }
      ],
      "Next": "PassState"
    },
    "FailState": {
      "Type": "Fail",
      "Cause": "Invalid response.",
      "Error": "ErrorA"
    },
    "PassState": {
      "Type": "Pass",
      "End": true
    }
  }
}